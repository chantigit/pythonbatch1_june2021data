Single thread in Python:
=======================
1.Output
         Job1.task1() prints i= 1
         Job1.task1() prints i= 2
         Job1.task1() prints i= 3
         Job1.task1() prints i= 4
         Job1.task1() prints i= 5
         Job2.task2() prints i= 6
         Job2.task2() prints i= 7
         Job2.task2() prints i= 8
         Job2.task2() prints i= 9
         Job2.task2() prints i= 10
         Job3.task3() prints i= 11
         Job3.task3() prints i= 12
         Job3.task3() prints i= 13
         Job3.task3() prints i= 14
         Job3.task3() prints i= 15
2.obj1,obj2,obj3 execution order   :  Sequential

3.obj2 waiting time		:5 sec
  obj3 waiting time		:10 sec
 
4.obj1,obj2,obj3 execution time  : 15 sec

5.obj1,obj2,obj3 exception dependecny : YES

Multithreading in Python:
=========================
1.Output
        
2.obj1,obj2,obj3 execution order   :  Simultaneous

3.obj2 waiting time		:0 sec
  obj3 waiting time		:0 sec
 
4.obj1,obj2,obj3 execution time  : 5 sec

5.obj1,obj2,obj3 exception dependecny : NO


Rules to create thread:
======================
1.Make your class child to be "Thread" class  (belongs to threading module)
2.Thread program execution starts from run() method, i.e we have to implement this method in every thread class
3.run() method is always called by start() method

Thread life cycle:
==================
1.New State 		: User creating object for thread class
2.Runnable State	: Thread object calling start() method (Here thread is ready to provide it's service)
3.Running State		: start() calling run() method (Here thread is providing it's service)
4.Non-Runnable State: Thread is in idle state
5.Dead State		: thread object is deleted